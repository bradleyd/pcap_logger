#!/usr/bin/env ruby
# encoding: utf-8
lib = File.expand_path(File.dirname(__FILE__) + '/../lib')
$LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)
require "bundler/setup"
require 'pcap_logger'
require 'optparse'

options = {}
banner = nil

# set the default option is none are given
#
OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [options]"

  opts.on("-i ", "--interface dev", "Ethernet device to sniff") do |d|
    options[:device] = d
  end

  opts.on("-c ", "--count 0", "Number of packets to sniff--Default -1") do |c|
    options[:count] = c
  end

  opts.on("-s ", "--snaplen 1500", "Set the snaplength for packet capture--Default 1500") do |s|
    options[:snaplen] = s
  end

  opts.on("-f ", "--filter tcp port 80", "Set the filter for packet capture--Default all ports") do |f|
    options[:filter] = f
  end

  opts.on("-r ", "--remote-host 127.0.0.1", "Set the remote host to send packets to--Default localhost") do |r|
    options[:remote_host] = r
  end

  opts.on("-p ", "--remote-port 20000", "Set the remote port to send packets to--Default 20000") do |p|
    options[:remote_port] = p
  end


  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
  #set current options
  banner = opts

end.parse!

if options.empty?
  puts banner
  exit
end

pcap_log = PcapLogger.start(snaplen: "-s #{options.fetch(:snaplen) { 1500}}", 
                            pkt_count: "-c #{options.fetch(:count) { -1 }}", 
                            device: "-i #{options.fetch(:device) { "eth0" }}", 
                            filter: options.fetch(:filter) {"tcp"},
                            remote_host: options.fetch(:remote_host) { 'localhost'},
                            remote_port: options.fetch(:remote_port) { 20000 })
p pcap_log
